name: CI / CD

on:
  push:
    branches: [ main ]

# Needed for checkout + OIDC
permissions:
  contents: read
  id-token: write

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    # expose your secrets as environment variables
    env:
      # project ID (string)  → secret INSTANCE
      GCP_PROJECT: ${{ secrets.INSTANCE }}
      # project NUMBER       → secret GCP_PROJECT_NUMBER
      GCP_PROJECT_NUMBER: ${{ secrets.GCP_PROJECT_NUMBER }}

      REGION:  us-central1
      SERVICE: shift-scheduler

      DB_USER:  ${{ secrets.DB_USER }}
      DB_PASS:  ${{ secrets.DB_PASS }}
      DB_NAME:  ${{ secrets.DB_NAME }}
      INSTANCE_CONNECTION_NAME: ${{ secrets.INSTANCE_CONNECTION_NAME }}

      GOOGLE_ID:     ${{ secrets.GOOGLE_ID }}
      GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
      FLASK_KEY:     ${{ secrets.FLASK_KEY }}

    defaults:
      run:
        working-directory: shifts_website   # <-- your code lives here

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest freezegun

      # ---------- OIDC authentication ----------
      - name: Authenticate to GCP via OIDC
        uses: google-github-actions/auth@v2
        with:
          # MUST use the project NUMBER in the provider path
          workload_identity_provider: >-
            projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/shift-pool/providers/github-actions
          # full email of the service account
          service_account: shift-scheduler@${{ env.GCP_PROJECT }}.iam.gserviceaccount.com
          token_format: access_token

      # ---------- gcloud SDK ----------
      - name: Install gcloud SDK (beta component)
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT }}
          install_components: beta

      # ---------- Cloud SQL proxy ----------
      - name: Start Cloud SQL Proxy
        run: |
          sudo mkdir -p /cloudsql                      # path in your URL
          curl -fsSL https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -o cloud_sql_proxy
          chmod +x cloud_sql_proxy
          ./cloud_sql_proxy \
            -instances=${INSTANCE_CONNECTION_NAME}=unix:/cloudsql/${INSTANCE_CONNECTION_NAME} &
          sleep 5

      # ---------- DB migrations + seed ----------
      - name: Run Alembic migrations
        run: alembic upgrade head

      - run: python seed_users.py
        name: Seed users

      # ---------- Build & push container ----------
      - name: Authorise Docker with GCR
        run: gcloud auth configure-docker --quiet

      - name: Build & push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: gcr.io/${{ env.GCP_PROJECT }}/${{ env.SERVICE }}:latest

      # ---------- Deploy to Cloud Run ----------
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE \
            --image gcr.io/${GCP_PROJECT}/${SERVICE}:latest \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --set-env-vars DB_USER=${DB_USER},DB_PASS=${DB_PASS},DB_NAME=${DB_NAME},INSTANCE_CONNECTION_NAME=${INSTANCE_CONNECTION_NAME},GOOGLE_ID=${GOOGLE_ID},GOOGLE_SECRET=${GOOGLE_SECRET},FLASK_KEY=${FLASK_KEY}
